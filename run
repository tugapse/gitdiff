#!/bin/bash

# Get the directory where this script is located and construct the path to the Python script.
PYTHON_SCRIPT_PATH="$(dirname "$0")/git_diff_script.py"

# Initialize flags and variables for shell script options
QUIET=false          # If true, suppress all console output from the shell script.
OUTPUT_FILE_PATH=""  # Path to save the output to.
REPO_PATH=""         # Path to the Git repository.

# Variables to store arguments specifically for the Python script.
# These will be built up and passed directly to the Python script.
PYTHON_ARGS=""

# Shell script's own verbose flag.
SHELL_VERBOSE=false

# Parse command-line arguments using a while loop and case statement.
# This loop iterates through all arguments provided to the shell script.
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        # --quiet option: Suppresses all console output from the shell script.
        --quiet)
            QUIET=true
            shift # Move to the next argument
            ;;
        # -o or --output option: Specifies a file to save the output.
        -o|--output)
            # Check if a filename argument is provided.
            if [ -z "$2" ]; then
                echo "Error: Option '$1' requires a filename argument." >&2
                exit 1
            fi
            OUTPUT_FILE_PATH="$2" # Store the output file path.
            shift 2 # Move past the option and its value.
            ;;
        # -v or --verbose option for the shell script:
        # Also sets the --verbose flag to be passed to the Python script.
        -v|--verbose)
            SHELL_VERBOSE=true       # Enable verbose output for the shell script.
            PYTHON_ARGS+=" --verbose" # Add --verbose to Python arguments.
            shift # Move to the next argument.
            ;;
        # -e or --extensions option: Filters diffs by file extension.
        # This argument and its values are passed directly to the Python script.
        -e|--extensions)
            # Check if at least one extension is provided.
            if [ -z "$2" ]; then
                echo "Error: Option '$1' requires at least one extension argument (e.g., .py .js)." >&2
                exit 1
            fi
            PYTHON_ARGS+=" --extensions" # Add --extensions to Python arguments.
            shift # Move past the option.
            # Loop through subsequent arguments as extensions until a new option or end of arguments.
            while [[ -n "$1" && ! "$1" =~ ^- ]]; do
                PYTHON_ARGS+=" $1" # Add each extension to Python arguments.
                shift # Move to the next argument.
            done
            ;;
        # -b or --ignore-binaries option: Do not display diffs for binary files.
        # This argument is passed directly to the Python script.
        -b|--ignore-binaries)
            PYTHON_ARGS+=" --ignore-binaries" # Add --ignore-binaries to Python arguments.
            shift # Move to the next argument.
            ;;
        # -j or --json option: Output the diffs in JSON format.
        # This argument is passed directly to the Python script.
        -j|--json)
            PYTHON_ARGS+=" --json" # Add --json to Python arguments.
            shift # Move to the next argument.
            ;;
        # Positional argument handling (expected to be the repository path).
        *)
            # If REPO_PATH is not yet set, set it to the current argument.
            if [ -z "$REPO_PATH" ]; then
                REPO_PATH="$1"
            else
                # If REPO_PATH is already set, it means an extra unexpected argument was given.
                if [ "$SHELL_VERBOSE" = true ]; then
                    echo "Warning: Ignoring extra argument '$1'. Only one repository path is supported." >&2
                fi
            fi
            shift # Move to the next argument.
            ;;
    esac
done

# Validate that a repository path was provided.
if [ -z "$REPO_PATH" ]; then
  echo "Usage: $0 <path_to_git_repository> [options]"
  echo "Options:"
  echo "  -o, --output <filename>    : Save output to the specified file."
  echo "  --quiet                    : Suppress all console output from the shell script."
  echo "  -v, --verbose              : Enable verbose output for both shell and Python scripts."
  echo "  -e, --extensions <ext1 ext2...> : Filter diffs by file extension (e.g., .py .js)."
  echo "  -b, --ignore-binaries      : Do not display diffs for binary files."
  echo "  -j, --json                 : Output the diffs in JSON format."
  exit 1
fi

# Determine if output should be saved to a file.
SHOULD_SAVE_TO_FILE=false
if [ -n "$OUTPUT_FILE_PATH" ]; then
  SHOULD_SAVE_TO_FILE=true
fi

# Inform user if shell verbose mode is enabled.
if [ "$SHELL_VERBOSE" = true ]; then
  echo "Generating Git diff report for: ${REPO_PATH}"
  if [ "$SHOULD_SAVE_TO_FILE" = true ]; then
    echo "Saving output to: ${OUTPUT_FILE_PATH}"
  fi
  echo "Python script will receive arguments: ${PYTHON_ARGS}"
  echo "----------------------------------------------------"
fi

# Create output directory if needed.
if [ "$SHOULD_SAVE_TO_FILE" = true ]; then
  OUTPUT_DIR=$(dirname "${OUTPUT_FILE_PATH}")
  if [ -n "$OUTPUT_DIR" ] && [ "$OUTPUT_DIR" != "." ]; then
    mkdir -p "${OUTPUT_DIR}"
  fi
fi

# Execute the Python script based on output and quiet options.
# Using eval to correctly parse PYTHON_ARGS which might contain spaces due to multiple extensions.
if [ "$SHOULD_SAVE_TO_FILE" = true ]; then
  if [ "$QUIET" = true ]; then
    # Redirect all output (stdout and stderr) to the file.
    eval python3 "${PYTHON_SCRIPT_PATH}" "${REPO_PATH}" ${PYTHON_ARGS} > "${OUTPUT_FILE_PATH}" 2>&1
  else
    # Tee output to both console and file.
    eval python3 "${PYTHON_SCRIPT_PATH}" "${REPO_PATH}" ${PYTHON_ARGS} 2>&1 | tee "${OUTPUT_FILE_PATH}"
  fi
else
  if [ "$QUIET" = true ]; then
    # Suppress all output to console (send to /dev/null).
    eval python3 "${PYTHON_SCRIPT_PATH}" "${REPO_PATH}" ${PYTHON_ARGS} > /dev/null 2>&1
  else
    # Display output directly to console.
    eval python3 "${PYTHON_SCRIPT_PATH}" "${REPO_PATH}" ${PYTHON_ARGS}
  fi
fi

LAST_COMMAND_EXIT_CODE=$?

# Provide a final status message based on the Python script's exit code.
if [ "$LAST_COMMAND_EXIT_CODE" -eq 0 ]; then
  if [ "$SHELL_VERBOSE" = true ]; then
    if [ "$SHOULD_SAVE_TO_FILE" = true ]; then
      echo "----------------------------------------------------"
      echo "Report successfully saved to ${OUTPUT_FILE_PATH}"
    else
      echo "----------------------------------------------------"
      echo "Report completed."
    fi
  elif [ "$SHOULD_SAVE_TO_FILE" = true ]; then
    echo "----------------------------------------------------"
    echo "Report successfully saved to ${OUTPUT_FILE_PATH}"
  fi
else
  if [ "$QUIET" = false ] || [ "$SHOULD_SAVE_TO_FILE" = true ]; then
    echo "----------------------------------------------------" >&2
    echo "An error occurred (Exit Code: $LAST_COMMAND_EXIT_CODE)." >&2
    if [ "$SHOULD_SAVE_TO_FILE" = true ]; then
      echo "Check ${OUTPUT_FILE_PATH} for details." >&2
    else
      echo "Output was displayed to console above." >&2
    fi
  fi
fi
